{"ast":null,"code":"import axios from 'axios';\nimport create from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport initiateWorkflow from '../feautures/companyDetails/api/initiateWorkflow';\n\nconst handleSetCompany = (set, get, args) => {\n  const companyDetails = Object.assign({}, get().companyDetails);\n\n  for (const object of args) {\n    switch (object.property) {\n      case 'name':\n        companyDetails.name = object.value;\n        break;\n\n      case 'segment':\n        companyDetails.segment = object.value;\n        break;\n\n      case 'share':\n        companyDetails.share = object.value;\n        break;\n\n      case 'numberOfEmployees':\n        companyDetails.numberOfEmployees = object.value;\n        break;\n\n      case 'ceo':\n        companyDetails.ceo = object.value;\n        break;\n\n      case 'countryOfOperation':\n        companyDetails.countryOfOperation = object.value;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  set({\n    companyDetails\n  });\n};\n\nconst handleInitiateWorkflow = async (set, get) => {\n  const companyDetails = get().companyDetails;\n  const args = {\n    cname: companyDetails.name,\n    countemp: companyDetails.numberOfEmployees,\n    ceo: companyDetails.ceo\n  };\n  await initiateWorkflow(args);\n};\n\nconst handleGetCompanyDetails = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\"));\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=116190&objAction=RunReport&key=\" + key);\n    const data = response.data;\n    data.pop();\n    set({\n      companyDetails: {\n        name: data[0].CNAME,\n        segment: data[0].SERVICENAME !== '?' ? data[0].SERVICENAME : '',\n        share: data[0].CSHARE !== '?' ? data[0].CSHARE : '',\n        numberOfEmployees: data[0].COUNTEMP !== '?' ? data[0].COUNTEMP : '',\n        ceo: data[0].NNAME !== '?' ? data[0].NNAME : '',\n        countryOfOperation: ''\n      }\n    });\n  }\n};\n\nconst handleSetDirectors = async (set, get, args) => {\n  /* const boardMembers = Object.assign({}, get().boardMembers);\r\n  for (const object of args) {\r\n      switch (object.property) {\r\n          case 'name':\r\n              companyDetails.name = object.value;\r\n              break;\r\n          case 'segment':\r\n              companyDetails.segment = object.value; \r\n              break;\r\n          case 'share':\r\n              companyDetails.share = object.value;\r\n              break;\r\n          case 'numberOfEmployees':\r\n              companyDetails.numberOfEmployees = object.value;\r\n              break;\r\n          case 'ceo':\r\n              companyDetails.ceo = object.value;\r\n              break;\r\n          case 'countryOfOperation':\r\n              companyDetails.countryOfOperation = object.value;\r\n              break;\r\n          default:\r\n              break;\r\n      }\r\n  }\r\n  set({companyDetails});*/\n};\n\nconst handleGetDirectors = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\"));\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=116138&objAction=RunReport&key=\" + key);\n    let data = response.data;\n    data.pop();\n    data = data.map(x => x.NAME);\n    console.log(data);\n    set({\n      directorList: data\n    });\n  }\n};\n\nconst handleSetCompanyShares = (set, get, args) => {\n  const companyShares = Object.assign({}, get().companyShares);\n\n  for (const object of args) {\n    switch (object.property) {\n      case 'first':\n        companyShares.first = object.value;\n        break;\n\n      case 'second':\n        companyShares.second = object.value;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  set({\n    companyShares\n  });\n};\n\nconst handleGetCompanyShares = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\"));\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\"\" + key);\n    const data = response.data;\n    data.pop();\n    set({\n      companyDetails: {\n        first: data,\n        second: data\n      }\n    });\n  }\n};\n\nconst store = (set, get) => ({\n  companyDetails: {\n    name: 'jj',\n    segment: '',\n    share: 0,\n    numberOfEmployees: 0,\n    ceo: '',\n    countryOfOperation: ''\n  },\n  directorList: ['ffh', 'ddff'],\n  companyShares: {\n    first: 0,\n    second: 0\n  },\n  setCompanyDetails: args => handleSetCompany(set, get, args),\n  setCompanyShares: args => handleSetCompanyShares(set, get, args),\n  setInitialCompanyDetails: () => set({\n    companyDetails: {\n      name: '',\n      segment: '',\n      share: 0,\n      numberOfEmployees: 0,\n      ceo: '',\n      countryOfOperation: ''\n    }\n  }),\n  initWorkflow: () => handleInitiateWorkflow(set, get),\n  getCompanyDetails: () => handleGetCompanyDetails(set, get),\n  getDirectors: () => handleGetDirectors(set, get),\n  getCompanyShares: () => handleGetCompanyShares(set, get)\n});\n\nconst useStore = create(devtools(store));\nexport default useStore;","map":{"version":3,"sources":["/home/user/Downloads/socar_tree_view/src/stores/useStore.js"],"names":["axios","create","devtools","initiateWorkflow","handleSetCompany","set","get","args","companyDetails","Object","assign","object","property","name","value","segment","share","numberOfEmployees","ceo","countryOfOperation","handleInitiateWorkflow","cname","countemp","handleGetCompanyDetails","params","URLSearchParams","window","location","search","key","parseInt","Number","isNaN","response","data","pop","CNAME","SERVICENAME","CSHARE","COUNTEMP","NNAME","handleSetDirectors","handleGetDirectors","map","x","NAME","console","log","directorList","handleSetCompanyShares","companyShares","first","second","handleGetCompanyShares","store","setCompanyDetails","setCompanyShares","setInitialCompanyDetails","initWorkflow","getCompanyDetails","getDirectors","getCompanyShares","useStore"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport create from 'zustand';\r\nimport {devtools} from 'zustand/middleware';\r\nimport initiateWorkflow from '../feautures/companyDetails/api/initiateWorkflow';\r\n\r\nconst handleSetCompany = (set, get, args) => {\r\n    const companyDetails = Object.assign({}, get().companyDetails);\r\n    for (const object of args) {\r\n        switch (object.property) {\r\n            case 'name':\r\n                companyDetails.name = object.value;\r\n                break;\r\n            case 'segment':\r\n                companyDetails.segment = object.value; \r\n                break;\r\n            case 'share':\r\n                companyDetails.share = object.value;\r\n                break;\r\n            case 'numberOfEmployees':\r\n                companyDetails.numberOfEmployees = object.value;\r\n                break;\r\n            case 'ceo':\r\n                companyDetails.ceo = object.value;\r\n                break;\r\n            case 'countryOfOperation':\r\n                companyDetails.countryOfOperation = object.value;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    set({companyDetails});\r\n}\r\n\r\nconst handleInitiateWorkflow = async (set, get) => {\r\n    const companyDetails = get().companyDetails;\r\n    const args = {\r\n        cname: companyDetails.name,\r\n        countemp: companyDetails.numberOfEmployees,\r\n        ceo: companyDetails.ceo\r\n    };\r\n    await initiateWorkflow(args);\r\n}\r\n\r\nconst handleGetCompanyDetails = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\"));\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=116190&objAction=RunReport&key=\"+key);\r\n        const data = response.data;\r\n        data.pop();\r\n        set({\r\n            companyDetails: {\r\n                name: data[0].CNAME,\r\n                segment: data[0].SERVICENAME !== '?' ? data[0].SERVICENAME : '',\r\n                share: data[0].CSHARE !== '?' ? data[0].CSHARE : '',\r\n                numberOfEmployees: data[0].COUNTEMP !== '?' ? data[0].COUNTEMP : '',\r\n                ceo: data[0].NNAME !== '?' ? data[0].NNAME : '',\r\n                countryOfOperation: ''\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst handleSetDirectors = async (set, get, args) => {\r\n    /* const boardMembers = Object.assign({}, get().boardMembers);\r\n    for (const object of args) {\r\n        switch (object.property) {\r\n            case 'name':\r\n                companyDetails.name = object.value;\r\n                break;\r\n            case 'segment':\r\n                companyDetails.segment = object.value; \r\n                break;\r\n            case 'share':\r\n                companyDetails.share = object.value;\r\n                break;\r\n            case 'numberOfEmployees':\r\n                companyDetails.numberOfEmployees = object.value;\r\n                break;\r\n            case 'ceo':\r\n                companyDetails.ceo = object.value;\r\n                break;\r\n            case 'countryOfOperation':\r\n                companyDetails.countryOfOperation = object.value;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    set({companyDetails});*/\r\n}\r\n\r\nconst handleGetDirectors = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\"));\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=116138&objAction=RunReport&key=\"+key);\r\n        let data = response.data;\r\n        data.pop();\r\n        data = data.map(x=>x.NAME);\r\n        console.log(data);\r\n        set({\r\n            directorList: data\r\n        })\r\n    }\r\n}\r\n\r\nconst handleSetCompanyShares = (set, get, args) => {\r\n    const companyShares = Object.assign({}, get().companyShares);\r\n    for (const object of args) {\r\n        switch (object.property) {\r\n            case 'first':\r\n                companyShares.first = object.value;\r\n                break;\r\n            case 'second':\r\n                companyShares.second = object.value; \r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    set({companyShares});    \r\n}\r\n\r\nconst handleGetCompanyShares = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\"));\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\"\"+key);\r\n        const data = response.data;\r\n        data.pop();\r\n        set({\r\n            companyDetails: {\r\n                first: data,\r\n                second: data\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst store = (set, get) => ({\r\n    companyDetails: {\r\n        name: 'jj',\r\n        segment: '',\r\n        share: 0,\r\n        numberOfEmployees: 0,\r\n        ceo: '',\r\n        countryOfOperation: ''\r\n    },\r\n    directorList: ['ffh','ddff'],\r\n    companyShares: {\r\n        first: 0,\r\n        second: 0\r\n    },\r\n    setCompanyDetails:  args => handleSetCompany(set, get, args),\r\n    setCompanyShares: args => handleSetCompanyShares(set, get, args),\r\n    setInitialCompanyDetails: () => set({companyDetails: {\r\n        name: '',\r\n        segment: '',\r\n        share: 0,\r\n        numberOfEmployees: 0,\r\n        ceo: '',\r\n        countryOfOperation: ''\r\n    }}),\r\n    initWorkflow: () => handleInitiateWorkflow(set, get),\r\n    getCompanyDetails: () => handleGetCompanyDetails(set, get),\r\n    getDirectors: () => handleGetDirectors(set, get),\r\n    getCompanyShares: () => handleGetCompanyShares(set, get)\r\n})\r\n\r\n\r\nconst useStore = create(devtools(store));\r\n\r\nexport default useStore;"]},"metadata":{},"sourceType":"module"}