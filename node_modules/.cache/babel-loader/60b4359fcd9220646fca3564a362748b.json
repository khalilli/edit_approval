{"ast":null,"code":"var _jsxFileName = \"/home/user/Downloads/socar_tree_view/src/feautures/companyDetails/views/CompanyDetails.js\",\n    _s = $RefreshSig$();\n\nimport CompanyDetailsComponent from \"./CompanyDetailsComponent\";\nimport useStore from '../../../stores/useStore';\nimport shallow from 'zustand/shallow';\nimport countries from '../../../assets/countries.json';\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getState = state => [state.companyDetails, state.setCompanyDetails, state.setInitialCompanyDetails, state.initWorkflow, state.getCompanyDetails];\n\nconst CompanyDetails = () => {\n  _s();\n\n  const [companyDetails, setCompanyDetails, setInitialCompanyDetails, initWorkflow, getCompanyDetails] = useStore(getState, shallow);\n  useEffect(() => {\n    getCompanyDetails();\n  }, []);\n  const [change, setChange] = useState(false);\n\n  if (companyDetails.name.length === 0) {\n    setChange(true);\n  }\n\n  const args = {\n    companyName: companyDetails.name,\n    companySegment: companyDetails.segment,\n    companyShare: companyDetails.share,\n    companyNumberOfEmployees: companyDetails.numberOfEmployees,\n    companyCEO: companyDetails.ceo,\n    countries,\n    companyCountryOfOperation: companyDetails.countryOfOperation,\n    cleanCountryName: () => {\n      console.log(\"Test\");\n\n      if (countries.findIndex(x => x.Name === companyDetails.countryOfOperation) === -1) {\n        setCompanyDetails([{\n          property: \"countryOfOperation\",\n          value: ''\n        }]);\n      }\n    },\n    setCompanyName: name => {\n      setCompanyDetails([{\n        property: \"name\",\n        value: name\n      }]);\n    },\n    setCompanySegment: segment => {\n      setCompanyDetails([{\n        property: 'segment',\n        value: segment\n      }]);\n    },\n    setCompanyShare: share => {\n      setCompanyDetails([{\n        property: 'share',\n        value: Number.parseInt(share)\n      }]);\n    },\n    setCompanyNumberOfEmployees: numberOfEmployees => {\n      setCompanyDetails([{\n        property: 'numberOfEmployees',\n        value: Number.parseInt(numberOfEmployees)\n      }]);\n    },\n    setCompanyCEO: ceo => {\n      setCompanyDetails([{\n        property: 'ceo',\n        value: ceo\n      }]);\n    },\n    setCountryOfOperation: countryOfOperation => {\n      setCompanyDetails([{\n        property: 'countryOfOperation',\n        value: countryOfOperation\n      }]);\n    },\n    reset: () => {\n      setInitialCompanyDetails();\n    },\n    onSubmitForm: () => {\n      initWorkflow();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CompanyDetailsComponent, { ...args\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CompanyDetails, \"1fcBurYytYRqh2Dsnd1wylB8Tvs=\", false, function () {\n  return [useStore];\n});\n\n_c = CompanyDetails;\nexport default CompanyDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompanyDetails\");","map":{"version":3,"sources":["/home/user/Downloads/socar_tree_view/src/feautures/companyDetails/views/CompanyDetails.js"],"names":["CompanyDetailsComponent","useStore","shallow","countries","useEffect","useState","getState","state","companyDetails","setCompanyDetails","setInitialCompanyDetails","initWorkflow","getCompanyDetails","CompanyDetails","change","setChange","name","length","args","companyName","companySegment","segment","companyShare","share","companyNumberOfEmployees","numberOfEmployees","companyCEO","ceo","companyCountryOfOperation","countryOfOperation","cleanCountryName","console","log","findIndex","x","Name","property","value","setCompanyName","setCompanySegment","setCompanyShare","Number","parseInt","setCompanyNumberOfEmployees","setCompanyCEO","setCountryOfOperation","reset","onSubmitForm"],"mappings":"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","sourcesContent":["import CompanyDetailsComponent from \"./CompanyDetailsComponent\";\r\nimport useStore from '../../../stores/useStore';\r\nimport shallow from 'zustand/shallow';\r\nimport countries from '../../../assets/countries.json';\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst getState = state => [\r\n    state.companyDetails,\r\n    state.setCompanyDetails,\r\n    state.setInitialCompanyDetails,\r\n    state.initWorkflow,\r\n    state.getCompanyDetails\r\n];\r\n\r\nconst CompanyDetails = () => {\r\n    const [companyDetails, setCompanyDetails, setInitialCompanyDetails, initWorkflow, getCompanyDetails] = useStore(getState, shallow);\r\n    \r\n    useEffect(()=>{\r\n        getCompanyDetails();\r\n    }, [])\r\n\r\n    const [change, setChange] = useState(false);\r\n\r\n    if(companyDetails.name.length === 0){\r\n        setChange(true);\r\n    }\r\n\r\n    const args = {\r\n        companyName: companyDetails.name,\r\n        companySegment: companyDetails.segment,\r\n        companyShare: companyDetails.share,\r\n        companyNumberOfEmployees: companyDetails.numberOfEmployees,\r\n        companyCEO: companyDetails.ceo,\r\n        countries,\r\n        companyCountryOfOperation: companyDetails.countryOfOperation,\r\n        cleanCountryName: () => {\r\n            console.log(\"Test\");\r\n            if(countries.findIndex(x=>x.Name === companyDetails.countryOfOperation) === -1){\r\n                setCompanyDetails([{property: \"countryOfOperation\", value: ''}]) \r\n            } \r\n        },\r\n        setCompanyName: name => {\r\n            setCompanyDetails([{property: \"name\", value: name}]) \r\n        },\r\n        setCompanySegment: segment => {\r\n            setCompanyDetails([{property: 'segment', value: segment}])\r\n        },\r\n        setCompanyShare: share => {\r\n            setCompanyDetails([{property: 'share', value: Number.parseInt(share)}])\r\n        },\r\n        setCompanyNumberOfEmployees: numberOfEmployees => {\r\n            setCompanyDetails([{property: 'numberOfEmployees', value: Number.parseInt(numberOfEmployees)}])\r\n        },\r\n        setCompanyCEO: ceo => {\r\n            setCompanyDetails([{property: 'ceo', value: ceo}])\r\n        },\r\n        setCountryOfOperation: countryOfOperation => {\r\n            setCompanyDetails([{property: 'countryOfOperation', value: countryOfOperation}])\r\n        },\r\n        reset: () => {\r\n            setInitialCompanyDetails();\r\n        }, \r\n        onSubmitForm: () => {\r\n            initWorkflow();\r\n        }\r\n    }\r\n\r\n    return <CompanyDetailsComponent {...args} />\r\n}\r\n\r\nexport default CompanyDetails;"]},"metadata":{},"sourceType":"module"}