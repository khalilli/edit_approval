{"ast":null,"code":"import axios from 'axios';\nimport create from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport initiateWorkflow from '../feautures/companyDetails/api/initiateWorkflow';\n\nconst handleSetCompany = (set, get, args) => {\n  const companyDetails = Object.assign({}, get().companyDetails);\n\n  for (const object of args) {\n    switch (object.property) {\n      case 'name':\n        companyDetails.name = object.value;\n        break;\n\n      case 'nameWarn':\n        companyDetails.nameWarn = object.value;\n        break;\n\n      case 'segment':\n        companyDetails.segment = object.value;\n        break;\n\n      case 'segmentWarn':\n        companyDetails.segmentWarn = object.value;\n        break;\n\n      case 'share':\n        companyDetails.share = object.value;\n        break;\n\n      case 'shareWarn':\n        companyDetails.shareWarn = object.value;\n        break;\n\n      case 'numberOfEmployees':\n        companyDetails.numberOfEmployees = object.value;\n        break;\n\n      case 'numberOfEmployeesWarn':\n        companyDetails.numberOfEmployeesWarn = object.value;\n        break;\n\n      case 'ceo':\n        companyDetails.ceo = object.value;\n        break;\n\n      case 'ceoWarn':\n        companyDetails.ceoWarn = object.value;\n        break;\n\n      case 'countryOfOperation':\n        companyDetails.countryOfOperation = object.value;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  set({\n    companyDetails\n  });\n};\n\nconst handleInitiateWorkflow = async (set, get) => {\n  const companyDetails = get().companyDetails;\n  const args = {\n    cname: companyDetails.name,\n    countemp: companyDetails.numberOfEmployees,\n    ceo: companyDetails.ceo\n  };\n  await initiateWorkflow(args);\n};\n\nconst handleGetCompanyDetails = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\"));\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=116190&objAction=RunReport&key=\" + key);\n    const data = response.data;\n    data.pop();\n    set({\n      companyDetails: {\n        name: data[0].CNAME,\n        nameWarn: data[0].CNAME,\n        segment: data[0].SERVICENAME !== '?' ? data[0].SERVICENAME : '',\n        segmentWarn: data[0].SERVICENAME !== '?' ? data[0].SERVICENAME : '',\n        share: data[0].CSHARE !== '?' ? data[0].CSHARE : '',\n        shareWarn: data[0].CSHARE !== '?' ? data[0].CSHARE : '',\n        numberOfEmployees: data[0].COUNTEMP !== '?' ? data[0].COUNTEMP : '',\n        numberOfEmployeesWarn: data[0].COUNTEMP !== '?' ? data[0].COUNTEMP : '',\n        ceo: data[0].NNAME !== '?' ? data[0].NNAME : '',\n        ceoWarn: data[0].NNAME !== '?' ? data[0].NNAME : '',\n        countryOfOperation: ''\n      }\n    });\n  }\n};\n\nconst handleGetDirectors = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\"));\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=128822&objAction=RunReport&key=\" + key);\n    let data = response.data;\n    data.pop();\n    data = data.map(x => x.DIREKTOR);\n    console.log(data);\n    set({\n      directorList: data\n    });\n  }\n};\n\nconst handleGetRepresentatives = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\"));\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=127757&objAction=RunReport&key=\" + key);\n    let data = response.data;\n    data.pop();\n    data = data.map(x => x.UMUMIYIGINCAQ);\n    console.log(data);\n    set({\n      representativeList: data\n    });\n  }\n};\n\nconst handleSetCompanyShares = (set, get, args) => {\n  const companyShares = Object.assign({}, get().companyShares);\n\n  for (const object of args) {\n    switch (object.property) {\n      case 'share':\n        companyShares.share = object.value;\n        break;\n\n      case 'name':\n        companyShares.name = object.value;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  set({\n    companyShares\n  });\n};\n\nconst handleGetCompanyShares = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\")); //this will help to define which company\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\" \" + key);\n    const data = response.data;\n    data.pop();\n    set({\n      companyShares: [{\n        share: data[0].Y,\n        name: data[0].CNAME\n      }]\n    });\n  }\n};\n\nconst handleSetFinancialData = (set, get, args) => {\n  const financialData = Object.assign({}, get().companyDetails);\n\n  for (const object of args) {\n    switch (object.property) {\n      case 'active':\n        financialData.active = object.value;\n        break;\n\n      case 'active':\n        financialData.active = object.value;\n        break;\n\n      case 'capital':\n        financialData.capital = object.value;\n        break;\n\n      case 'capital':\n        financialData.capital = object.value;\n        break;\n\n      case 'liability':\n        financialData.liability = object.value;\n        break;\n\n      case 'liability':\n        financialData.liability = object.value;\n        break;\n\n      case 'ebitda':\n        financialData.ebitda = object.value;\n        break;\n\n      case 'ebitda':\n        financialData.ebitda = object.value;\n        break;\n\n      case 'loss':\n        financialData.loss = object.value;\n        break;\n\n      case 'loss':\n        financialData.loss = object.value;\n        break;\n\n      case 'incometax':\n        financialData.incometax = object.value;\n        break;\n\n      case 'incometax':\n        financialData.incometax = object.value;\n        break;\n\n      case 'propertytax':\n        financialData.propertytax = object.value;\n        break;\n\n      case 'propertytax':\n        financialData.propertytax = object.value;\n        break;\n\n      case 'dividend1':\n        financialData.dividend1 = object.value;\n        break;\n\n      case 'dividend1':\n        financialData.dividend1 = object.value;\n        break;\n\n      case 'dividend2':\n        financialData.dividend2 = object.value;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  set({\n    financialData\n  });\n};\n\nconst handleGetFinancialData = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\"));\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=126689&objAction=RunReport&key\" + key);\n    const data = response.data;\n    data.pop();\n    set({\n      financialData: {\n        active: data[0].CEMIAKTIVLER,\n        capital: data[0].CEMIKAPITAL,\n        liability: data[0].CEMIOHDELIKLER,\n        ebitda: data[0].EBITDA,\n        loss: data[0].XALISMENFEET,\n        incometax: data[0].MENFEETVERGI,\n        propertytax: data[0].EMLAKVERGI,\n        dividend1: data[0].BUTUNTESISCILERE,\n        dividend2: data[0].SOCARA\n      }\n    });\n  }\n};\n\nconst store = (set, get) => ({\n  companyDetails: {\n    name: '',\n    nameWarn: '',\n    segment: '',\n    segmentWarn: '',\n    share: 0,\n    shareWarn: 0,\n    numberOfEmployees: 0,\n    numberOfEmployeesWarn: 0,\n    ceo: '',\n    ceoWarn: '',\n    countryOfOperation: ''\n  },\n  directorList: [{\n    dirname: null\n  }],\n  representativeList: [{\n    repname: null\n  }],\n  financialData: {\n    active: 0,\n    capital: 0,\n    liability: 0,\n    ebitda: 0,\n    loss: 0,\n    incometax: 0,\n    propertytax: 0,\n    dividend1: 0,\n    dividend2: 0\n  },\n  companyShares: [{\n    name: 'Socar',\n    share: 60\n  }],\n  setCompanyDetails: args => handleSetCompany(set, get, args),\n  setFinancialData: args => handleSetFinancialData(set, get, args),\n  setCompanyShares: args => handleSetCompanyShares(set, get, args),\n  setInitialCompanyDetails: () => set({\n    companyDetails: {\n      name: '',\n      segment: '',\n      share: 0,\n      numberOfEmployees: 0,\n      ceo: '',\n      countryOfOperation: ''\n    }\n  }),\n  setInitialFinancialData: () => set({\n    financialData: {\n      active: 0,\n      capital: 0,\n      liability: 0,\n      ebitda: 0,\n      loss: 0,\n      incometax: 0,\n      propertytax: 0,\n      dividend1: 0,\n      dividend2: 0\n    }\n  }),\n  initWorkflow: () => handleInitiateWorkflow(set, get),\n  getCompanyDetails: () => handleGetCompanyDetails(set, get),\n  getDirectors: () => handleGetDirectors(set, get),\n  getRepresentatives: () => handleGetRepresentatives(set, get),\n  getFinancialData: () => handleGetFinancialData(set, get),\n  getCompanyShares: () => handleGetCompanyShares(set, get)\n});\n\nconst useStore = create(devtools(store));\nexport default useStore;","map":{"version":3,"sources":["/home/user/Downloads/socar_tree_view/src/stores/useStore.js"],"names":["axios","create","devtools","initiateWorkflow","handleSetCompany","set","get","args","companyDetails","Object","assign","object","property","name","value","nameWarn","segment","segmentWarn","share","shareWarn","numberOfEmployees","numberOfEmployeesWarn","ceo","ceoWarn","countryOfOperation","handleInitiateWorkflow","cname","countemp","handleGetCompanyDetails","params","URLSearchParams","window","location","search","key","parseInt","Number","isNaN","response","data","pop","CNAME","SERVICENAME","CSHARE","COUNTEMP","NNAME","handleGetDirectors","map","x","DIREKTOR","console","log","directorList","handleGetRepresentatives","UMUMIYIGINCAQ","representativeList","handleSetCompanyShares","companyShares","handleGetCompanyShares","Y","handleSetFinancialData","financialData","active","capital","liability","ebitda","loss","incometax","propertytax","dividend1","dividend2","handleGetFinancialData","CEMIAKTIVLER","CEMIKAPITAL","CEMIOHDELIKLER","EBITDA","XALISMENFEET","MENFEETVERGI","EMLAKVERGI","BUTUNTESISCILERE","SOCARA","store","dirname","repname","setCompanyDetails","setFinancialData","setCompanyShares","setInitialCompanyDetails","setInitialFinancialData","initWorkflow","getCompanyDetails","getDirectors","getRepresentatives","getFinancialData","getCompanyShares","useStore"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport create from 'zustand';\r\nimport {devtools} from 'zustand/middleware';\r\nimport initiateWorkflow from '../feautures/companyDetails/api/initiateWorkflow';\r\n\r\nconst handleSetCompany = (set, get, args) => {\r\n    const companyDetails = Object.assign({}, get().companyDetails);\r\n    for (const object of args) {  \r\n        switch (object.property) {\r\n            case 'name':\r\n                companyDetails.name = object.value;\r\n                break;\r\n            case 'nameWarn':\r\n                companyDetails.nameWarn = object.value;\r\n                break;\r\n            case 'segment':\r\n                companyDetails.segment = object.value; \r\n                break;\r\n            case 'segmentWarn':\r\n                companyDetails.segmentWarn = object.value; \r\n                break;\r\n            case 'share':\r\n                companyDetails.share = object.value;\r\n                break;\r\n            case 'shareWarn':\r\n                companyDetails.shareWarn = object.value;\r\n                break;\r\n            case 'numberOfEmployees':\r\n                companyDetails.numberOfEmployees = object.value;\r\n                break;\r\n            case 'numberOfEmployeesWarn':\r\n                companyDetails.numberOfEmployeesWarn = object.value;\r\n                break;\r\n            case 'ceo':\r\n                companyDetails.ceo = object.value;\r\n                break;\r\n            case 'ceoWarn':\r\n                companyDetails.ceoWarn = object.value;\r\n                break;\r\n            case 'countryOfOperation':\r\n                companyDetails.countryOfOperation = object.value;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    set({companyDetails});\r\n}\r\n\r\nconst handleInitiateWorkflow = async (set, get) => {\r\n    const companyDetails = get().companyDetails;\r\n    const args = {\r\n        cname: companyDetails.name,\r\n        countemp: companyDetails.numberOfEmployees,\r\n        ceo: companyDetails.ceo\r\n    };\r\n    await initiateWorkflow(args);\r\n}\r\n\r\nconst handleGetCompanyDetails = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\"));\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=116190&objAction=RunReport&key=\"+key);\r\n        const data = response.data;\r\n        data.pop();\r\n        set({\r\n            companyDetails: {\r\n                name: data[0].CNAME,\r\n                nameWarn: data[0].CNAME,\r\n                segment: data[0].SERVICENAME !== '?' ? data[0].SERVICENAME : '',\r\n                segmentWarn: data[0].SERVICENAME !== '?' ? data[0].SERVICENAME : '',\r\n                share: data[0].CSHARE !== '?' ? data[0].CSHARE : '',\r\n                shareWarn: data[0].CSHARE !== '?' ? data[0].CSHARE : '',\r\n                numberOfEmployees: data[0].COUNTEMP !== '?' ? data[0].COUNTEMP : '',\r\n                numberOfEmployeesWarn: data[0].COUNTEMP !== '?' ? data[0].COUNTEMP : '',\r\n                ceo: data[0].NNAME !== '?' ? data[0].NNAME : '',\r\n                ceoWarn: data[0].NNAME !== '?' ? data[0].NNAME : '',\r\n                countryOfOperation: ''\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst handleGetDirectors = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\"));\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=128822&objAction=RunReport&key=\"+key);\r\n        let data = response.data;\r\n        data.pop();\r\n        data = data.map(x=>x.DIREKTOR);\r\n        console.log(data);\r\n        set({\r\n            directorList: data,\r\n        })\r\n    }\r\n}\r\nconst handleGetRepresentatives = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\"));\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=127757&objAction=RunReport&key=\"+key);\r\n        let data = response.data;\r\n        data.pop();\r\n        data = data.map(x=>x.UMUMIYIGINCAQ);\r\n        console.log(data);\r\n        set({\r\n            representativeList: data,\r\n        })\r\n    }\r\n}\r\nconst handleSetCompanyShares = (set, get, args) => {\r\n    const companyShares = Object.assign({}, get().companyShares);\r\n    for (const object of args) {\r\n        switch (object.property) {\r\n            case 'share':\r\n                companyShares.share = object.value; \r\n                break;\r\n            case 'name':\r\n                companyShares.name = object.value;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    set({companyShares});    \r\n}\r\nconst handleGetCompanyShares = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\")); //this will help to define which company\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\" \"+key);\r\n        const data = response.data;\r\n        data.pop();\r\n        set({\r\n            companyShares: [{\r\n                share: data[0].Y,\r\n                name: data[0].CNAME\r\n            }]\r\n        })\r\n    }\r\n}\r\n\r\nconst handleSetFinancialData = (set, get, args) => {\r\n    const financialData = Object.assign({}, get().companyDetails);\r\n    for (const object of args) {  \r\n        switch (object.property) {\r\n            case 'active':\r\n                financialData.active = object.value;\r\n                break;\r\n            case 'active':\r\n                financialData.active = object.value;\r\n                break;\r\n            case 'capital':\r\n                financialData.capital = object.value;\r\n                break; \r\n            case 'capital':\r\n                financialData.capital = object.value;\r\n                break;\r\n            case 'liability':\r\n                financialData.liability = object.value;\r\n                break;\r\n            case 'liability':\r\n                financialData.liability = object.value;\r\n                break;\r\n            case 'ebitda':\r\n                financialData.ebitda = object.value;\r\n                break;\r\n            case 'ebitda':\r\n                financialData.ebitda = object.value;\r\n                break;\r\n            case 'loss':\r\n                financialData.loss = object.value;\r\n                break;  \r\n            case 'loss':\r\n                financialData.loss = object.value;\r\n                break;   \r\n            case 'incometax':\r\n                financialData.incometax = object.value;\r\n                break;\r\n            case 'incometax':\r\n                financialData.incometax = object.value;\r\n                break;\r\n            case 'propertytax':\r\n                financialData.propertytax = object.value;\r\n                break; \r\n            case 'propertytax':\r\n                financialData.propertytax = object.value;\r\n                break;   \r\n            case 'dividend1':\r\n                financialData.dividend1 = object.value;\r\n                break;\r\n            case 'dividend1':\r\n                    financialData.dividend1 = object.value;\r\n                    break;\r\n            case 'dividend2':\r\n                financialData.dividend2 = object.value;\r\n                break;      \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    set({financialData});\r\n}\r\n\r\nconst handleGetFinancialData = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\"));\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=126689&objAction=RunReport&key\"+key);\r\n        const data = response.data;\r\n        data.pop();\r\n        set({\r\n            financialData: {\r\n                active: data[0].CEMIAKTIVLER,\r\n                capital: data[0].CEMIKAPITAL,\r\n                liability: data[0].CEMIOHDELIKLER,\r\n                ebitda: data[0].EBITDA,\r\n                loss: data[0].XALISMENFEET,\r\n                incometax: data[0].MENFEETVERGI,\r\n                propertytax: data[0].EMLAKVERGI,\r\n                dividend1: data[0].BUTUNTESISCILERE,\r\n                dividend2: data[0].SOCARA,\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst store = (set, get) => ({\r\n    companyDetails: {\r\n        name: '',\r\n        nameWarn: '',\r\n        segment: '',\r\n        segmentWarn: '',\r\n        share: 0,\r\n        shareWarn: 0,\r\n        numberOfEmployees: 0,\r\n        numberOfEmployeesWarn: 0,\r\n        ceo: '',\r\n        ceoWarn: '',\r\n        countryOfOperation: ''\r\n    },\r\n    directorList: [{dirname: null}],\r\n    representativeList: [{repname: null}],\r\n    financialData: {\r\n        active: 0,\r\n        capital: 0,\r\n        liability: 0,\r\n        ebitda: 0,\r\n        loss: 0,\r\n        incometax: 0,\r\n        propertytax: 0,\r\n        dividend1: 0,\r\n        dividend2: 0\r\n    },\r\n    companyShares: [{\r\n        name: 'Socar',\r\n        share: 60\r\n    }],\r\n    setCompanyDetails:  args => handleSetCompany(set, get, args),\r\n    setFinancialData: args => handleSetFinancialData(set, get, args),\r\n    setCompanyShares: args => handleSetCompanyShares(set, get, args),\r\n    setInitialCompanyDetails: () => set({companyDetails: {\r\n        name: '',\r\n        segment: '',\r\n        share: 0,\r\n        numberOfEmployees: 0,\r\n        ceo: '',\r\n        countryOfOperation: ''\r\n    }}),\r\n    setInitialFinancialData: () => set({financialData: {\r\n        active: 0,\r\n        capital: 0,\r\n        liability: 0,\r\n        ebitda: 0,\r\n        loss: 0,\r\n        incometax: 0,\r\n        propertytax: 0,\r\n        dividend1: 0,\r\n        dividend2: 0\r\n    }}),\r\n    initWorkflow: () => handleInitiateWorkflow(set, get),\r\n    getCompanyDetails: () => handleGetCompanyDetails(set, get),\r\n    getDirectors: () => handleGetDirectors(set, get),\r\n    getRepresentatives: () => handleGetRepresentatives(set, get),\r\n    getFinancialData: () => handleGetFinancialData(set, get),\r\n    getCompanyShares: () => handleGetCompanyShares(set, get)\r\n})\r\n\r\n\r\nconst useStore = create(devtools(store));\r\n\r\nexport default useStore;"]},"metadata":{},"sourceType":"module"}