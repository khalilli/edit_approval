{"ast":null,"code":"import axios from 'axios';\nimport create from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport initiateWorkflow from '../feautures/companyDetails/api/initiateWorkflow';\n\nconst handleSetCompany = (set, get, args) => {\n  const companyDetails = Object.assign({}, get().companyDetails);\n\n  for (const object of args) {// switch (object.property) {\n    //     case 'name':\n    //         companyDetails.name = object.value;\n    //         break;\n    //     case 'segment':\n    //         companyDetails.segment = object.value; \n    //         break;\n    //     case 'share':\n    //         companyDetails.share = object.value;\n    //         break;\n    //     case 'numberOfEmployees':\n    //         companyDetails.numberOfEmployees = object.value;\n    //         break;\n    //     case 'ceo':\n    //         companyDetails.ceo = object.value;\n    //         break;\n    //     case 'countryOfOperation':\n    //         companyDetails.countryOfOperation = object.value;\n    //         break;\n    //     default:\n    //         break;\n    //}\n  }\n\n  set({\n    companyDetails\n  });\n};\n\nconst handleInitiateWorkflow = async (set, get) => {\n  const companyDetails = get().companyDetails;\n  const args = {\n    cname: companyDetails.name,\n    countemp: companyDetails.numberOfEmployees,\n    ceo: companyDetails.ceo\n  };\n  await initiateWorkflow(args);\n};\n\nconst handleGetCompanyDetails = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\"));\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=116190&objAction=RunReport&key=\" + key);\n    const data = response.data;\n    data.pop();\n    set({\n      companyDetails: {\n        name: data[0].CNAME,\n        segment: data[0].SERVICENAME !== '?' ? data[0].SERVICENAME : '',\n        share: data[0].CSHARE !== '?' ? data[0].CSHARE : '',\n        numberOfEmployees: data[0].COUNTEMP !== '?' ? data[0].COUNTEMP : '',\n        ceo: data[0].NNAME !== '?' ? data[0].NNAME : '',\n        countryOfOperation: ''\n      }\n    });\n  }\n};\n\nconst handleSetBoardMembers = async (set, get, args) => {\n  const boardMembers = Object.assign({}, get().boardMembers);\n\n  for (const object of args) {\n    switch (object.property) {\n      case 'directorList':\n        boardMembers.directorList = object.value;\n        break;\n\n      case 'representativeList':\n        boardMembers.representativeList = object.value;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  set({\n    boardMembers\n  });\n};\n\nconst handleGetBoardMembers = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\"));\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\"\" + key);\n    const data = response.data;\n    data.pop();\n    set({\n      boardMembers: {\n        directorList: data,\n        representativeList: data\n      }\n    });\n  }\n};\n\nconst handleGetDirectors = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\"));\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=116138&objAction=RunReport&key=\" + key);\n    let data = response.data;\n    data.pop();\n    data = data.map(x => x.NAME);\n    console.log(data);\n    set({\n      directorList: data\n    });\n  }\n};\n\nconst handleSetCompanyShares = (set, get, args) => {\n  const companyShares = Object.assign({}, get().companyShares);\n\n  for (const object of args) {\n    switch (object.property) {\n      case 'name':\n        companyShares.name = object.value;\n        break;\n\n      case 'share':\n        companyShares.share = object.value;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  set({\n    companyShares\n  });\n};\n\nconst handleGetCompanyShares = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\")); //this will help to define which company\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\" \" + key);\n    const data = response.data;\n    data.pop();\n    set({\n      companyShares: [{\n        share: data[0].Y,\n        name: data[0].CNAME\n      }]\n    });\n  }\n};\n\nconst store = (set, get) => ({\n  companyDetails: {\n    name: 'jj',\n    segment: '',\n    share: 0,\n    numberOfEmployees: 0,\n    ceo: '',\n    countryOfOperation: ''\n  },\n  directorList: ['hgjj', 'ghhgh'],\n  boardMembers: {\n    directorList: [{\n      dirname: 'd1'\n    }],\n    representativeList: [{\n      repname: 'representative1'\n    }]\n  },\n  companyShares: [{\n    name: 'Socar',\n    share: 60\n  }],\n  setCompanyDetails: args => handleSetCompany(set, get, args),\n  setBoardMembers: args => handleSetBoardMembers(set, get, args),\n  setCompanyShares: args => handleSetCompanyShares(set, get, args),\n  setInitialCompanyDetails: () => set({\n    companyDetails: {\n      name: '',\n      segment: '',\n      share: 0,\n      numberOfEmployees: 0,\n      ceo: '',\n      countryOfOperation: ''\n    }\n  }),\n  initWorkflow: () => handleInitiateWorkflow(set, get),\n  getCompanyDetails: () => handleGetCompanyDetails(set, get),\n  getBoardMembers: () => handleGetBoardMembers(set, get),\n  getDirectors: () => handleGetDirectors(set, get),\n  getCompanyShares: () => handleGetCompanyShares(set, get)\n});\n\nconst useStore = create(devtools(store));\nexport default useStore;","map":{"version":3,"sources":["/home/user/Downloads/socar_tree_view/src/stores/useStore.js"],"names":["axios","create","devtools","initiateWorkflow","handleSetCompany","set","get","args","companyDetails","Object","assign","object","handleInitiateWorkflow","cname","name","countemp","numberOfEmployees","ceo","handleGetCompanyDetails","params","URLSearchParams","window","location","search","key","parseInt","Number","isNaN","response","data","pop","CNAME","segment","SERVICENAME","share","CSHARE","COUNTEMP","NNAME","countryOfOperation","handleSetBoardMembers","boardMembers","property","directorList","value","representativeList","handleGetBoardMembers","handleGetDirectors","map","x","NAME","console","log","handleSetCompanyShares","companyShares","handleGetCompanyShares","Y","store","dirname","repname","setCompanyDetails","setBoardMembers","setCompanyShares","setInitialCompanyDetails","initWorkflow","getCompanyDetails","getBoardMembers","getDirectors","getCompanyShares","useStore"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport create from 'zustand';\r\nimport {devtools} from 'zustand/middleware';\r\nimport initiateWorkflow from '../feautures/companyDetails/api/initiateWorkflow';\r\n\r\nconst handleSetCompany = (set, get, args) => {\r\n    const companyDetails = Object.assign({}, get().companyDetails);\r\n    for (const object of args) {\r\n        // switch (object.property) {\r\n        //     case 'name':\r\n        //         companyDetails.name = object.value;\r\n        //         break;\r\n        //     case 'segment':\r\n        //         companyDetails.segment = object.value; \r\n        //         break;\r\n        //     case 'share':\r\n        //         companyDetails.share = object.value;\r\n        //         break;\r\n        //     case 'numberOfEmployees':\r\n        //         companyDetails.numberOfEmployees = object.value;\r\n        //         break;\r\n        //     case 'ceo':\r\n        //         companyDetails.ceo = object.value;\r\n        //         break;\r\n        //     case 'countryOfOperation':\r\n        //         companyDetails.countryOfOperation = object.value;\r\n        //         break;\r\n        //     default:\r\n        //         break;\r\n        //}\r\n    }\r\n    set({companyDetails});\r\n}\r\n\r\nconst handleInitiateWorkflow = async (set, get) => {\r\n    const companyDetails = get().companyDetails;\r\n    const args = {\r\n        cname: companyDetails.name,\r\n        countemp: companyDetails.numberOfEmployees,\r\n        ceo: companyDetails.ceo\r\n    };\r\n    await initiateWorkflow(args);\r\n}\r\n\r\nconst handleGetCompanyDetails = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\"));\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=116190&objAction=RunReport&key=\"+key);\r\n        const data = response.data;\r\n        data.pop();\r\n        set({\r\n            companyDetails: {\r\n                name: data[0].CNAME,\r\n                segment: data[0].SERVICENAME !== '?' ? data[0].SERVICENAME : '',\r\n                share: data[0].CSHARE !== '?' ? data[0].CSHARE : '',\r\n                numberOfEmployees: data[0].COUNTEMP !== '?' ? data[0].COUNTEMP : '',\r\n                ceo: data[0].NNAME !== '?' ? data[0].NNAME : '',\r\n                countryOfOperation: ''\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst handleSetBoardMembers = async (set, get, args) => {\r\n    const boardMembers = Object.assign({}, get().boardMembers);\r\n    for (const object of args) {\r\n        switch (object.property) {\r\n            case 'directorList':\r\n                boardMembers.directorList = object.value;\r\n                break;\r\n            case 'representativeList':\r\n                boardMembers.representativeList = object.value;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    set({boardMembers});\r\n}\r\n\r\nconst handleGetBoardMembers = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\"));\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\"\"+key);\r\n        const data = response.data;\r\n        data.pop();\r\n        set({\r\n            boardMembers: {\r\n                directorList: data,\r\n                representativeList: data\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst handleGetDirectors = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\"));\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=116138&objAction=RunReport&key=\"+key);\r\n        let data = response.data;\r\n        data.pop();\r\n        data = data.map(x=>x.NAME);\r\n        console.log(data);\r\n        set({\r\n            directorList: data\r\n        })\r\n    }\r\n}\r\n\r\nconst handleSetCompanyShares = (set, get, args) => {\r\n    const companyShares = Object.assign({}, get().companyShares);\r\n    for (const object of args) {\r\n        switch (object.property) {\r\n            case 'name':\r\n                companyShares.name = object.value;\r\n                break;\r\n            case 'share':\r\n                companyShares.share = object.value; \r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    set({companyShares});    \r\n}\r\n\r\nconst handleGetCompanyShares = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\")); //this will help to define which company\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\" \"+key);\r\n        const data = response.data;\r\n        data.pop();\r\n        set({\r\n            companyShares: [{\r\n                share: data[0].Y,\r\n                name: data[0].CNAME\r\n            }]\r\n        })\r\n    }\r\n}\r\n\r\nconst store = (set, get) => ({\r\n    companyDetails: {\r\n        name: 'jj',\r\n        segment: '',\r\n        share: 0,\r\n        numberOfEmployees: 0,\r\n        ceo: '',\r\n        countryOfOperation: ''\r\n    },\r\n    directorList: ['hgjj', 'ghhgh'],\r\n    boardMembers: {\r\n        directorList: [{dirname: 'd1'}],\r\n        representativeList: [{repname: 'representative1'}]\r\n    },\r\n    companyShares: [{\r\n        name: 'Socar',\r\n        share: 60\r\n    }],\r\n    setCompanyDetails:  args => handleSetCompany(set, get, args),\r\n    setBoardMembers: args => handleSetBoardMembers(set, get, args),\r\n    setCompanyShares: args => handleSetCompanyShares(set, get, args),\r\n    setInitialCompanyDetails: () => set({companyDetails: {\r\n        name: '',\r\n        segment: '',\r\n        share: 0,\r\n        numberOfEmployees: 0,\r\n        ceo: '',\r\n        countryOfOperation: ''\r\n    }}),\r\n    initWorkflow: () => handleInitiateWorkflow(set, get),\r\n    getCompanyDetails: () => handleGetCompanyDetails(set, get),\r\n    getBoardMembers: () => handleGetBoardMembers(set, get),\r\n    getDirectors: () => handleGetDirectors(set, get),\r\n    getCompanyShares: () => handleGetCompanyShares(set, get)\r\n})\r\n\r\n\r\nconst useStore = create(devtools(store));\r\n\r\nexport default useStore;"]},"metadata":{},"sourceType":"module"}