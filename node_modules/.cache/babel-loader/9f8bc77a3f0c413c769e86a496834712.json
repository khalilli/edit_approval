{"ast":null,"code":"import axios from 'axios';\nimport create from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport initiateWorkflow from '../feautures/companyDetails/api/initiateWorkflow';\n\nconst handleSetCompany = (set, get, args) => {\n  const companyDetails = Object.assign({}, get().companyDetails);\n\n  for (const object of args) {\n    switch (object.property) {\n      case 'name':\n        companyDetails.name = object.value;\n        break;\n\n      case 'segment':\n        companyDetails.segment = object.value;\n        break;\n\n      case 'share':\n        companyDetails.share = object.value;\n        break;\n\n      case 'numberOfEmployees':\n        companyDetails.numberOfEmployees = object.value;\n        break;\n\n      case 'ceo':\n        companyDetails.ceo = object.value;\n        break;\n\n      case 'countryOfOperation':\n        companyDetails.countryOfOperation = object.value;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  set({\n    companyDetails\n  });\n};\n\nconst handleInitiateWorkflow = async (set, get) => {\n  const companyDetails = get().companyDetails;\n  const args = {\n    cname: companyDetails.name,\n    countemp: companyDetails.numberOfEmployees,\n    ceo: companyDetails.ceo\n  };\n  await initiateWorkflow(args);\n};\n\nconst handleGetCompanyDetails = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\"));\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=116190&objAction=RunReport&key=\" + key);\n    const data = response.data;\n    data.pop();\n    set({\n      companyDetails: {\n        name: data[0].CNAME,\n        segment: data[0].SERVICENAME !== '?' ? data[0].SERVICENAME : '',\n        share: data[0].CSHARE !== '?' ? data[0].CSHARE : '',\n        numberOfEmployees: data[0].COUNTEMP !== '?' ? data[0].COUNTEMP : '',\n        ceo: data[0].NNAME !== '?' ? data[0].NNAME : '',\n        countryOfOperation: ''\n      }\n    });\n  }\n};\n\nconst handleSetBoardMembers = async (set, get, args) => {\n  const boardMembers = Object.assign({}, get().boardMembers);\n\n  for (const object of args) {\n    switch (object.property) {\n      case 'directorList':\n        boardMembers.directorList = object.value;\n        break;\n\n      case 'representativeList':\n        boardMembers.representativeList = object.value;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  set({\n    boardMembers\n  });\n};\n\nconst handleGetBoardMembers = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\"));\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\"\" + key);\n    const data = response.data;\n    data.pop();\n    set({\n      boardMembers: {\n        directorList: data,\n        representativeList: data\n      }\n    });\n  }\n};\n\nconst handleGetDirectors = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\"));\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=116138&objAction=RunReport&key=\" + key);\n    let data = response.data;\n    data.pop();\n    data = data.map(x => x.NAME);\n    console.log(data);\n    set({\n      directorList: data\n    });\n  }\n};\n\nconst handleSetCompanyShares = (set, get, args) => {\n  const companyShares = Object.assign({}, get().companyShares);\n\n  for (const object of args) {\n    switch (object.property) {\n      case 'share':\n        companyShares.share = object.value;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  set({\n    companyShares\n  });\n};\n\nconst handleGetCompanyShares = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\")); //this will help to define which company\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\" \" + key);\n    const data = response.data;\n    data.pop();\n    set({\n      companyShares: [{\n        share: data[0].Y,\n        name: data[0].CNAME\n      }]\n    });\n  }\n};\n\nconst handleSetFinancialData = (set, get, args) => {\n  const financialData = Object.assign({}, get().companyDetails);\n\n  for (const object of args) {\n    switch (object.property) {\n      case 'active':\n        financialData.active = object.value;\n        break;\n\n      case 'capital':\n        financialData.capital = object.value;\n        break;\n\n      case 'liability':\n        financialData.liability = object.value;\n        break;\n\n      case 'ebitda':\n        financialData.ebitda = object.value;\n        break;\n\n      case 'loss':\n        financialData.loss = object.value;\n        break;\n\n      case 'incometax':\n        financialData.incometax = object.value;\n        break;\n\n      case 'propertytax':\n        financialData.propertytax = object.value;\n        break;\n\n      case 'dividend1':\n        financialData.dividend1 = object.value;\n        break;\n\n      case 'dividend2':\n        financialData.dividend2 = object.value;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  set({\n    financialData\n  });\n};\n\nconst handleGetFinancialData = async (set, get) => {\n  let params = new URLSearchParams(window.location.search);\n  let key = parseInt(params.get(\"key\"));\n\n  if (!Number.isNaN(key)) {\n    const response = await axios.get(\"\" + key);\n    const data = response.data;\n    data.pop();\n    set({\n      financialData: {\n        active: data[0].CEMIAKTIVLER,\n        capital: data[0].CEMIKAPITAL,\n        liability: data[0].CEMIOHDELIKLER,\n        ebitda: data[0].EBITDA,\n        loss: data[0].XALISMENFEET,\n        incometax: data[0].MENFEETVERGI,\n        propertytax: data[0].EMLAKVERGI,\n        dividend1: data[0].BUTUNTESISCILERE,\n        dividend2: data[0].SOCARA\n      }\n    });\n  }\n};\n\nconst store = (set, get) => ({\n  companyDetails: {\n    name: 'jj',\n    segment: '',\n    share: 0,\n    numberOfEmployees: 0,\n    ceo: '',\n    countryOfOperation: ''\n  },\n  directorList: ['hgjj', 'ghhgh'],\n  boardMembers: {\n    directorList: [{\n      dirname: 'd1'\n    }],\n    representativeList: [{\n      repname: 'representative1'\n    }]\n  },\n  financialData: {\n    active: 0,\n    capital: 0,\n    liability: 0,\n    ebitda: 0,\n    loss: 0,\n    incometax: 0,\n    propertytax: 0,\n    dividend1: 0,\n    dividend2: 0\n  },\n  companyShares: [{\n    name: 'Socar',\n    share: 60\n  }, {\n    name: 'Tekfen',\n    share: 40\n  }],\n  setCompanyDetails: args => handleSetCompany(set, get, args),\n  setBoardMembers: args => handleSetBoardMembers(set, get, args),\n  setFinancialData: args => handleSetFinancialData(set, get, args),\n  setCompanyShares: args => handleSetCompanyShares(set, get, args),\n  setInitialCompanyDetails: () => set({\n    companyDetails: {\n      name: '',\n      segment: '',\n      share: 0,\n      numberOfEmployees: 0,\n      ceo: '',\n      countryOfOperation: ''\n    }\n  }),\n  initWorkflow: () => handleInitiateWorkflow(set, get),\n  getCompanyDetails: () => handleGetCompanyDetails(set, get),\n  getBoardMembers: () => handleGetBoardMembers(set, get),\n  getDirectors: () => handleGetDirectors(set, get),\n  getFinancialData: () => handleGetFinancialData(set, get),\n  getCompanyShares: () => handleGetCompanyShares(set, get)\n});\n\nconst useStore = create(devtools(store));\nexport default useStore;","map":{"version":3,"sources":["/home/user/Downloads/socar_tree_view/src/stores/useStore.js"],"names":["axios","create","devtools","initiateWorkflow","handleSetCompany","set","get","args","companyDetails","Object","assign","object","property","name","value","segment","share","numberOfEmployees","ceo","countryOfOperation","handleInitiateWorkflow","cname","countemp","handleGetCompanyDetails","params","URLSearchParams","window","location","search","key","parseInt","Number","isNaN","response","data","pop","CNAME","SERVICENAME","CSHARE","COUNTEMP","NNAME","handleSetBoardMembers","boardMembers","directorList","representativeList","handleGetBoardMembers","handleGetDirectors","map","x","NAME","console","log","handleSetCompanyShares","companyShares","handleGetCompanyShares","Y","handleSetFinancialData","financialData","active","capital","liability","ebitda","loss","incometax","propertytax","dividend1","dividend2","handleGetFinancialData","CEMIAKTIVLER","CEMIKAPITAL","CEMIOHDELIKLER","EBITDA","XALISMENFEET","MENFEETVERGI","EMLAKVERGI","BUTUNTESISCILERE","SOCARA","store","dirname","repname","setCompanyDetails","setBoardMembers","setFinancialData","setCompanyShares","setInitialCompanyDetails","initWorkflow","getCompanyDetails","getBoardMembers","getDirectors","getFinancialData","getCompanyShares","useStore"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,OAAOC,gBAAP,MAA6B,kDAA7B;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACzC,QAAMC,cAAc,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,GAAG,GAAGE,cAAxB,CAAvB;;AACA,OAAK,MAAMG,MAAX,IAAqBJ,IAArB,EAA2B;AACvB,YAAQI,MAAM,CAACC,QAAf;AACI,WAAK,MAAL;AACIJ,QAAAA,cAAc,CAACK,IAAf,GAAsBF,MAAM,CAACG,KAA7B;AACA;;AACJ,WAAK,SAAL;AACIN,QAAAA,cAAc,CAACO,OAAf,GAAyBJ,MAAM,CAACG,KAAhC;AACA;;AACJ,WAAK,OAAL;AACIN,QAAAA,cAAc,CAACQ,KAAf,GAAuBL,MAAM,CAACG,KAA9B;AACA;;AACJ,WAAK,mBAAL;AACIN,QAAAA,cAAc,CAACS,iBAAf,GAAmCN,MAAM,CAACG,KAA1C;AACA;;AACJ,WAAK,KAAL;AACIN,QAAAA,cAAc,CAACU,GAAf,GAAqBP,MAAM,CAACG,KAA5B;AACA;;AACJ,WAAK,oBAAL;AACIN,QAAAA,cAAc,CAACW,kBAAf,GAAoCR,MAAM,CAACG,KAA3C;AACA;;AACJ;AACI;AApBR;AAsBH;;AACDT,EAAAA,GAAG,CAAC;AAACG,IAAAA;AAAD,GAAD,CAAH;AACH,CA3BD;;AA6BA,MAAMY,sBAAsB,GAAG,OAAOf,GAAP,EAAYC,GAAZ,KAAoB;AAC/C,QAAME,cAAc,GAAGF,GAAG,GAAGE,cAA7B;AACA,QAAMD,IAAI,GAAG;AACTc,IAAAA,KAAK,EAAEb,cAAc,CAACK,IADb;AAETS,IAAAA,QAAQ,EAAEd,cAAc,CAACS,iBAFhB;AAGTC,IAAAA,GAAG,EAAEV,cAAc,CAACU;AAHX,GAAb;AAKA,QAAMf,gBAAgB,CAACI,IAAD,CAAtB;AACH,CARD;;AAUA,MAAMgB,uBAAuB,GAAG,OAAOlB,GAAP,EAAYC,GAAZ,KAAoB;AAChD,MAAIkB,MAAM,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAb;AACA,MAAIC,GAAG,GAAGC,QAAQ,CAACN,MAAM,CAAClB,GAAP,CAAW,KAAX,CAAD,CAAlB;;AACA,MAAG,CAACyB,MAAM,CAACC,KAAP,CAAaH,GAAb,CAAJ,EAAsB;AAClB,UAAMI,QAAQ,GAAG,MAAMjC,KAAK,CAACM,GAAN,CAAU,wFAAsFuB,GAAhG,CAAvB;AACA,UAAMK,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACAA,IAAAA,IAAI,CAACC,GAAL;AACA9B,IAAAA,GAAG,CAAC;AACAG,MAAAA,cAAc,EAAE;AACZK,QAAAA,IAAI,EAAEqB,IAAI,CAAC,CAAD,CAAJ,CAAQE,KADF;AAEZrB,QAAAA,OAAO,EAAEmB,IAAI,CAAC,CAAD,CAAJ,CAAQG,WAAR,KAAwB,GAAxB,GAA8BH,IAAI,CAAC,CAAD,CAAJ,CAAQG,WAAtC,GAAoD,EAFjD;AAGZrB,QAAAA,KAAK,EAAEkB,IAAI,CAAC,CAAD,CAAJ,CAAQI,MAAR,KAAmB,GAAnB,GAAyBJ,IAAI,CAAC,CAAD,CAAJ,CAAQI,MAAjC,GAA0C,EAHrC;AAIZrB,QAAAA,iBAAiB,EAAEiB,IAAI,CAAC,CAAD,CAAJ,CAAQK,QAAR,KAAqB,GAArB,GAA2BL,IAAI,CAAC,CAAD,CAAJ,CAAQK,QAAnC,GAA8C,EAJrD;AAKZrB,QAAAA,GAAG,EAAEgB,IAAI,CAAC,CAAD,CAAJ,CAAQM,KAAR,KAAkB,GAAlB,GAAwBN,IAAI,CAAC,CAAD,CAAJ,CAAQM,KAAhC,GAAwC,EALjC;AAMZrB,QAAAA,kBAAkB,EAAE;AANR;AADhB,KAAD,CAAH;AAUH;AACJ,CAlBD;;AAoBA,MAAMsB,qBAAqB,GAAG,OAAOpC,GAAP,EAAYC,GAAZ,EAAiBC,IAAjB,KAA0B;AACpD,QAAMmC,YAAY,GAAGjC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,GAAG,GAAGoC,YAAxB,CAArB;;AACA,OAAK,MAAM/B,MAAX,IAAqBJ,IAArB,EAA2B;AACvB,YAAQI,MAAM,CAACC,QAAf;AACI,WAAK,cAAL;AACI8B,QAAAA,YAAY,CAACC,YAAb,GAA4BhC,MAAM,CAACG,KAAnC;AACA;;AACJ,WAAK,oBAAL;AACI4B,QAAAA,YAAY,CAACE,kBAAb,GAAkCjC,MAAM,CAACG,KAAzC;AACA;;AACJ;AACI;AARR;AAUH;;AACDT,EAAAA,GAAG,CAAC;AAACqC,IAAAA;AAAD,GAAD,CAAH;AACH,CAfD;;AAgBA,MAAMG,qBAAqB,GAAG,OAAOxC,GAAP,EAAYC,GAAZ,KAAoB;AAC9C,MAAIkB,MAAM,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAb;AACA,MAAIC,GAAG,GAAGC,QAAQ,CAACN,MAAM,CAAClB,GAAP,CAAW,KAAX,CAAD,CAAlB;;AACA,MAAG,CAACyB,MAAM,CAACC,KAAP,CAAaH,GAAb,CAAJ,EAAsB;AAClB,UAAMI,QAAQ,GAAG,MAAMjC,KAAK,CAACM,GAAN,CAAU,KAAGuB,GAAb,CAAvB;AACA,UAAMK,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACAA,IAAAA,IAAI,CAACC,GAAL;AACA9B,IAAAA,GAAG,CAAC;AACAqC,MAAAA,YAAY,EAAE;AACVC,QAAAA,YAAY,EAAET,IADJ;AAEVU,QAAAA,kBAAkB,EAAEV;AAFV;AADd,KAAD,CAAH;AAMH;AACJ,CAdD;;AAeA,MAAMY,kBAAkB,GAAG,OAAOzC,GAAP,EAAYC,GAAZ,KAAoB;AAC3C,MAAIkB,MAAM,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAb;AACA,MAAIC,GAAG,GAAGC,QAAQ,CAACN,MAAM,CAAClB,GAAP,CAAW,KAAX,CAAD,CAAlB;;AACA,MAAG,CAACyB,MAAM,CAACC,KAAP,CAAaH,GAAb,CAAJ,EAAsB;AAClB,UAAMI,QAAQ,GAAG,MAAMjC,KAAK,CAACM,GAAN,CAAU,wFAAsFuB,GAAhG,CAAvB;AACA,QAAIK,IAAI,GAAGD,QAAQ,CAACC,IAApB;AACAA,IAAAA,IAAI,CAACC,GAAL;AACAD,IAAAA,IAAI,GAAGA,IAAI,CAACa,GAAL,CAASC,CAAC,IAAEA,CAAC,CAACC,IAAd,CAAP;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYjB,IAAZ;AACA7B,IAAAA,GAAG,CAAC;AACAsC,MAAAA,YAAY,EAAET;AADd,KAAD,CAAH;AAGH;AACJ,CAbD;;AAcA,MAAMkB,sBAAsB,GAAG,CAAC/C,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC/C,QAAM8C,aAAa,GAAG5C,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,GAAG,GAAG+C,aAAxB,CAAtB;;AACA,OAAK,MAAM1C,MAAX,IAAqBJ,IAArB,EAA2B;AACvB,YAAQI,MAAM,CAACC,QAAf;AACI,WAAK,OAAL;AACIyC,QAAAA,aAAa,CAACrC,KAAd,GAAsBL,MAAM,CAACG,KAA7B;AACA;;AACJ;AACI;AALR;AAOH;;AACDT,EAAAA,GAAG,CAAC;AAACgD,IAAAA;AAAD,GAAD,CAAH;AACH,CAZD;;AAaA,MAAMC,sBAAsB,GAAG,OAAOjD,GAAP,EAAYC,GAAZ,KAAoB;AAC/C,MAAIkB,MAAM,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAb;AACA,MAAIC,GAAG,GAAGC,QAAQ,CAACN,MAAM,CAAClB,GAAP,CAAW,KAAX,CAAD,CAAlB,CAF+C,CAER;;AACvC,MAAG,CAACyB,MAAM,CAACC,KAAP,CAAaH,GAAb,CAAJ,EAAsB;AAClB,UAAMI,QAAQ,GAAG,MAAMjC,KAAK,CAACM,GAAN,CAAU,MAAIuB,GAAd,CAAvB;AACA,UAAMK,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACAA,IAAAA,IAAI,CAACC,GAAL;AACA9B,IAAAA,GAAG,CAAC;AACAgD,MAAAA,aAAa,EAAE,CAAC;AACZrC,QAAAA,KAAK,EAAEkB,IAAI,CAAC,CAAD,CAAJ,CAAQqB,CADH;AAEZ1C,QAAAA,IAAI,EAAEqB,IAAI,CAAC,CAAD,CAAJ,CAAQE;AAFF,OAAD;AADf,KAAD,CAAH;AAMH;AACJ,CAdD;;AAgBA,MAAMoB,sBAAsB,GAAG,CAACnD,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC/C,QAAMkD,aAAa,GAAGhD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,GAAG,GAAGE,cAAxB,CAAtB;;AACA,OAAK,MAAMG,MAAX,IAAqBJ,IAArB,EAA2B;AACvB,YAAQI,MAAM,CAACC,QAAf;AACI,WAAK,QAAL;AACI6C,QAAAA,aAAa,CAACC,MAAd,GAAuB/C,MAAM,CAACG,KAA9B;AACA;;AACJ,WAAK,SAAL;AACI2C,QAAAA,aAAa,CAACE,OAAd,GAAwBhD,MAAM,CAACG,KAA/B;AACA;;AACJ,WAAK,WAAL;AACI2C,QAAAA,aAAa,CAACG,SAAd,GAA0BjD,MAAM,CAACG,KAAjC;AACA;;AACJ,WAAK,QAAL;AACI2C,QAAAA,aAAa,CAACI,MAAd,GAAuBlD,MAAM,CAACG,KAA9B;AACA;;AACJ,WAAK,MAAL;AACI2C,QAAAA,aAAa,CAACK,IAAd,GAAqBnD,MAAM,CAACG,KAA5B;AACA;;AACJ,WAAK,WAAL;AACI2C,QAAAA,aAAa,CAACM,SAAd,GAA0BpD,MAAM,CAACG,KAAjC;AACA;;AACJ,WAAK,aAAL;AACI2C,QAAAA,aAAa,CAACO,WAAd,GAA4BrD,MAAM,CAACG,KAAnC;AACA;;AACJ,WAAK,WAAL;AACI2C,QAAAA,aAAa,CAACQ,SAAd,GAA0BtD,MAAM,CAACG,KAAjC;AACA;;AACJ,WAAK,WAAL;AACI2C,QAAAA,aAAa,CAACS,SAAd,GAA0BvD,MAAM,CAACG,KAAjC;AACA;;AACJ;AACI;AA7BR;AA+BH;;AACDT,EAAAA,GAAG,CAAC;AAACoD,IAAAA;AAAD,GAAD,CAAH;AACH,CApCD;;AAsCA,MAAMU,sBAAsB,GAAG,OAAO9D,GAAP,EAAYC,GAAZ,KAAoB;AAC/C,MAAIkB,MAAM,GAAG,IAAIC,eAAJ,CAAoBC,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAAb;AACA,MAAIC,GAAG,GAAGC,QAAQ,CAACN,MAAM,CAAClB,GAAP,CAAW,KAAX,CAAD,CAAlB;;AACA,MAAG,CAACyB,MAAM,CAACC,KAAP,CAAaH,GAAb,CAAJ,EAAsB;AAClB,UAAMI,QAAQ,GAAG,MAAMjC,KAAK,CAACM,GAAN,CAAU,KAAGuB,GAAb,CAAvB;AACA,UAAMK,IAAI,GAAGD,QAAQ,CAACC,IAAtB;AACAA,IAAAA,IAAI,CAACC,GAAL;AACA9B,IAAAA,GAAG,CAAC;AACAoD,MAAAA,aAAa,EAAE;AACXC,QAAAA,MAAM,EAAExB,IAAI,CAAC,CAAD,CAAJ,CAAQkC,YADL;AAEXT,QAAAA,OAAO,EAAEzB,IAAI,CAAC,CAAD,CAAJ,CAAQmC,WAFN;AAGXT,QAAAA,SAAS,EAAE1B,IAAI,CAAC,CAAD,CAAJ,CAAQoC,cAHR;AAIXT,QAAAA,MAAM,EAAE3B,IAAI,CAAC,CAAD,CAAJ,CAAQqC,MAJL;AAKXT,QAAAA,IAAI,EAAE5B,IAAI,CAAC,CAAD,CAAJ,CAAQsC,YALH;AAMXT,QAAAA,SAAS,EAAE7B,IAAI,CAAC,CAAD,CAAJ,CAAQuC,YANR;AAOXT,QAAAA,WAAW,EAAE9B,IAAI,CAAC,CAAD,CAAJ,CAAQwC,UAPV;AAQXT,QAAAA,SAAS,EAAE/B,IAAI,CAAC,CAAD,CAAJ,CAAQyC,gBARR;AASXT,QAAAA,SAAS,EAAEhC,IAAI,CAAC,CAAD,CAAJ,CAAQ0C;AATR;AADf,KAAD,CAAH;AAaH;AACJ,CArBD;;AAuBA,MAAMC,KAAK,GAAG,CAACxE,GAAD,EAAMC,GAAN,MAAe;AACzBE,EAAAA,cAAc,EAAE;AACZK,IAAAA,IAAI,EAAE,IADM;AAEZE,IAAAA,OAAO,EAAE,EAFG;AAGZC,IAAAA,KAAK,EAAE,CAHK;AAIZC,IAAAA,iBAAiB,EAAE,CAJP;AAKZC,IAAAA,GAAG,EAAE,EALO;AAMZC,IAAAA,kBAAkB,EAAE;AANR,GADS;AASzBwB,EAAAA,YAAY,EAAE,CAAC,MAAD,EAAS,OAAT,CATW;AAUzBD,EAAAA,YAAY,EAAE;AACVC,IAAAA,YAAY,EAAE,CAAC;AAACmC,MAAAA,OAAO,EAAE;AAAV,KAAD,CADJ;AAEVlC,IAAAA,kBAAkB,EAAE,CAAC;AAACmC,MAAAA,OAAO,EAAE;AAAV,KAAD;AAFV,GAVW;AAczBtB,EAAAA,aAAa,EAAE;AACXC,IAAAA,MAAM,EAAE,CADG;AAEXC,IAAAA,OAAO,EAAE,CAFE;AAGXC,IAAAA,SAAS,EAAE,CAHA;AAIXC,IAAAA,MAAM,EAAE,CAJG;AAKXC,IAAAA,IAAI,EAAE,CALK;AAMXC,IAAAA,SAAS,EAAE,CANA;AAOXC,IAAAA,WAAW,EAAE,CAPF;AAQXC,IAAAA,SAAS,EAAE,CARA;AASXC,IAAAA,SAAS,EAAE;AATA,GAdU;AAyBzBb,EAAAA,aAAa,EAAE,CAAC;AACZxC,IAAAA,IAAI,EAAE,OADM;AAEZG,IAAAA,KAAK,EAAE;AAFK,GAAD,EAGZ;AACCH,IAAAA,IAAI,EAAE,QADP;AAECG,IAAAA,KAAK,EAAE;AAFR,GAHY,CAzBU;AAgCzBgE,EAAAA,iBAAiB,EAAGzE,IAAI,IAAIH,gBAAgB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,CAhCnB;AAiCzB0E,EAAAA,eAAe,EAAE1E,IAAI,IAAIkC,qBAAqB,CAACpC,GAAD,EAAMC,GAAN,EAAWC,IAAX,CAjCrB;AAkCzB2E,EAAAA,gBAAgB,EAAE3E,IAAI,IAAIiD,sBAAsB,CAACnD,GAAD,EAAMC,GAAN,EAAWC,IAAX,CAlCvB;AAmCzB4E,EAAAA,gBAAgB,EAAE5E,IAAI,IAAI6C,sBAAsB,CAAC/C,GAAD,EAAMC,GAAN,EAAWC,IAAX,CAnCvB;AAoCzB6E,EAAAA,wBAAwB,EAAE,MAAM/E,GAAG,CAAC;AAACG,IAAAA,cAAc,EAAE;AACjDK,MAAAA,IAAI,EAAE,EAD2C;AAEjDE,MAAAA,OAAO,EAAE,EAFwC;AAGjDC,MAAAA,KAAK,EAAE,CAH0C;AAIjDC,MAAAA,iBAAiB,EAAE,CAJ8B;AAKjDC,MAAAA,GAAG,EAAE,EAL4C;AAMjDC,MAAAA,kBAAkB,EAAE;AAN6B;AAAjB,GAAD,CApCV;AA4CzBkE,EAAAA,YAAY,EAAE,MAAMjE,sBAAsB,CAACf,GAAD,EAAMC,GAAN,CA5CjB;AA6CzBgF,EAAAA,iBAAiB,EAAE,MAAM/D,uBAAuB,CAAClB,GAAD,EAAMC,GAAN,CA7CvB;AA8CzBiF,EAAAA,eAAe,EAAE,MAAM1C,qBAAqB,CAACxC,GAAD,EAAMC,GAAN,CA9CnB;AA+CzBkF,EAAAA,YAAY,EAAE,MAAM1C,kBAAkB,CAACzC,GAAD,EAAMC,GAAN,CA/Cb;AAgDzBmF,EAAAA,gBAAgB,EAAE,MAAMtB,sBAAsB,CAAC9D,GAAD,EAAMC,GAAN,CAhDrB;AAiDzBoF,EAAAA,gBAAgB,EAAE,MAAMpC,sBAAsB,CAACjD,GAAD,EAAMC,GAAN;AAjDrB,CAAf,CAAd;;AAqDA,MAAMqF,QAAQ,GAAG1F,MAAM,CAACC,QAAQ,CAAC2E,KAAD,CAAT,CAAvB;AAEA,eAAec,QAAf","sourcesContent":["import axios from 'axios';\r\nimport create from 'zustand';\r\nimport {devtools} from 'zustand/middleware';\r\nimport initiateWorkflow from '../feautures/companyDetails/api/initiateWorkflow';\r\n\r\nconst handleSetCompany = (set, get, args) => {\r\n    const companyDetails = Object.assign({}, get().companyDetails);\r\n    for (const object of args) {  \r\n        switch (object.property) {\r\n            case 'name':\r\n                companyDetails.name = object.value;\r\n                break;\r\n            case 'segment':\r\n                companyDetails.segment = object.value; \r\n                break;\r\n            case 'share':\r\n                companyDetails.share = object.value;\r\n                break;\r\n            case 'numberOfEmployees':\r\n                companyDetails.numberOfEmployees = object.value;\r\n                break;\r\n            case 'ceo':\r\n                companyDetails.ceo = object.value;\r\n                break;\r\n            case 'countryOfOperation':\r\n                companyDetails.countryOfOperation = object.value;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    set({companyDetails});\r\n}\r\n\r\nconst handleInitiateWorkflow = async (set, get) => {\r\n    const companyDetails = get().companyDetails;\r\n    const args = {\r\n        cname: companyDetails.name,\r\n        countemp: companyDetails.numberOfEmployees,\r\n        ceo: companyDetails.ceo\r\n    };\r\n    await initiateWorkflow(args);\r\n}\r\n\r\nconst handleGetCompanyDetails = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\"));\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=116190&objAction=RunReport&key=\"+key);\r\n        const data = response.data;\r\n        data.pop();\r\n        set({\r\n            companyDetails: {\r\n                name: data[0].CNAME,\r\n                segment: data[0].SERVICENAME !== '?' ? data[0].SERVICENAME : '',\r\n                share: data[0].CSHARE !== '?' ? data[0].CSHARE : '',\r\n                numberOfEmployees: data[0].COUNTEMP !== '?' ? data[0].COUNTEMP : '',\r\n                ceo: data[0].NNAME !== '?' ? data[0].NNAME : '',\r\n                countryOfOperation: ''\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst handleSetBoardMembers = async (set, get, args) => {\r\n    const boardMembers = Object.assign({}, get().boardMembers);\r\n    for (const object of args) {\r\n        switch (object.property) {\r\n            case 'directorList':\r\n                boardMembers.directorList = object.value;\r\n                break;\r\n            case 'representativeList':\r\n                boardMembers.representativeList = object.value;\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    set({boardMembers});\r\n}\r\nconst handleGetBoardMembers = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\"));\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\"\"+key);\r\n        const data = response.data;\r\n        data.pop();\r\n        set({\r\n            boardMembers: {\r\n                directorList: data,\r\n                representativeList: data\r\n            }\r\n        })\r\n    }\r\n}\r\nconst handleGetDirectors = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\"));\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\"http://192.168.14.33/otcs/llisapi.dll?func=ll&objId=116138&objAction=RunReport&key=\"+key);\r\n        let data = response.data;\r\n        data.pop();\r\n        data = data.map(x=>x.NAME);\r\n        console.log(data);\r\n        set({\r\n            directorList: data\r\n        })\r\n    }\r\n}\r\nconst handleSetCompanyShares = (set, get, args) => {\r\n    const companyShares = Object.assign({}, get().companyShares);\r\n    for (const object of args) {\r\n        switch (object.property) {\r\n            case 'share':\r\n                companyShares.share = object.value; \r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    set({companyShares});    \r\n}\r\nconst handleGetCompanyShares = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\")); //this will help to define which company\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\" \"+key);\r\n        const data = response.data;\r\n        data.pop();\r\n        set({\r\n            companyShares: [{\r\n                share: data[0].Y,\r\n                name: data[0].CNAME\r\n            }]\r\n        })\r\n    }\r\n}\r\n\r\nconst handleSetFinancialData = (set, get, args) => {\r\n    const financialData = Object.assign({}, get().companyDetails);\r\n    for (const object of args) {  \r\n        switch (object.property) {\r\n            case 'active':\r\n                financialData.active = object.value;\r\n                break;\r\n            case 'capital':\r\n                financialData.capital = object.value;\r\n                break; \r\n            case 'liability':\r\n                financialData.liability = object.value;\r\n                break;\r\n            case 'ebitda':\r\n                financialData.ebitda = object.value;\r\n                break;\r\n            case 'loss':\r\n                financialData.loss = object.value;\r\n                break;    \r\n            case 'incometax':\r\n                financialData.incometax = object.value;\r\n                break;\r\n            case 'propertytax':\r\n                financialData.propertytax = object.value;\r\n                break;   \r\n            case 'dividend1':\r\n                financialData.dividend1 = object.value;\r\n                break;\r\n            case 'dividend2':\r\n                financialData.dividend2 = object.value;\r\n                break;      \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    set({financialData});\r\n}\r\n\r\nconst handleGetFinancialData = async (set, get) => {\r\n    let params = new URLSearchParams(window.location.search);\r\n    let key = parseInt(params.get(\"key\"));\r\n    if(!Number.isNaN(key)){\r\n        const response = await axios.get(\"\"+key);\r\n        const data = response.data;\r\n        data.pop();\r\n        set({\r\n            financialData: {\r\n                active: data[0].CEMIAKTIVLER,\r\n                capital: data[0].CEMIKAPITAL,\r\n                liability: data[0].CEMIOHDELIKLER,\r\n                ebitda: data[0].EBITDA,\r\n                loss: data[0].XALISMENFEET,\r\n                incometax: data[0].MENFEETVERGI,\r\n                propertytax: data[0].EMLAKVERGI,\r\n                dividend1: data[0].BUTUNTESISCILERE,\r\n                dividend2: data[0].SOCARA,\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nconst store = (set, get) => ({\r\n    companyDetails: {\r\n        name: 'jj',\r\n        segment: '',\r\n        share: 0,\r\n        numberOfEmployees: 0,\r\n        ceo: '',\r\n        countryOfOperation: ''\r\n    },\r\n    directorList: ['hgjj', 'ghhgh'],\r\n    boardMembers: {\r\n        directorList: [{dirname: 'd1'}],\r\n        representativeList: [{repname: 'representative1'}]\r\n    },\r\n    financialData: {\r\n        active: 0,\r\n        capital: 0,\r\n        liability: 0,\r\n        ebitda: 0,\r\n        loss: 0,\r\n        incometax: 0,\r\n        propertytax: 0,\r\n        dividend1: 0,\r\n        dividend2: 0\r\n    },\r\n    companyShares: [{\r\n        name: 'Socar',\r\n        share: 60\r\n    }, {\r\n        name: 'Tekfen',\r\n        share: 40\r\n    }],\r\n    setCompanyDetails:  args => handleSetCompany(set, get, args),\r\n    setBoardMembers: args => handleSetBoardMembers(set, get, args),\r\n    setFinancialData: args => handleSetFinancialData(set, get, args),\r\n    setCompanyShares: args => handleSetCompanyShares(set, get, args),\r\n    setInitialCompanyDetails: () => set({companyDetails: {\r\n        name: '',\r\n        segment: '',\r\n        share: 0,\r\n        numberOfEmployees: 0,\r\n        ceo: '',\r\n        countryOfOperation: ''\r\n    }}),\r\n    initWorkflow: () => handleInitiateWorkflow(set, get),\r\n    getCompanyDetails: () => handleGetCompanyDetails(set, get),\r\n    getBoardMembers: () => handleGetBoardMembers(set, get),\r\n    getDirectors: () => handleGetDirectors(set, get),\r\n    getFinancialData: () => handleGetFinancialData(set, get),\r\n    getCompanyShares: () => handleGetCompanyShares(set, get)\r\n})\r\n\r\n\r\nconst useStore = create(devtools(store));\r\n\r\nexport default useStore;"]},"metadata":{},"sourceType":"module"}