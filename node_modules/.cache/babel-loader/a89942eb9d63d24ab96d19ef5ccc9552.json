{"ast":null,"code":"var _jsxFileName = \"/home/user/Downloads/socar_tree_view/src/feautures/companyDetails/views/CompanyDetails.js\",\n    _s = $RefreshSig$();\n\nimport CompanyDetailsComponent from \"./CompanyDetailsComponent\";\nimport useStore from '../../../stores/useStore';\nimport shallow from 'zustand/shallow';\nimport countries from '../../../assets/countries.json';\nimport { useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst getState = state => [state.companyDetails, state.setCompanyDetails, state.setInitialCompanyDetails, state.initWorkflow, state.getCompanyDetails];\n\nconst CompanyDetails = () => {\n  _s();\n\n  const [companyDetails, setCompanyDetails, setInitialCompanyDetails, initWorkflow, getCompanyDetails] = useStore(getState, shallow);\n  useEffect(() => {\n    getCompanyDetails();\n  }, []);\n  var color,\n      colorS,\n      colorSh,\n      colorEmp,\n      colorC = false;\n\n  if (companyDetails.companyName !== companyDetails.nameWarn) {\n    color = true;\n  }\n\n  console.log(companyDetails.companyName, companyDetails.nameWarn);\n\n  if (companyDetails.companySegment !== companyDetails.segmentWarn) {\n    colorS = true;\n  }\n\n  if (companyDetails.companyShare !== companyDetails.shareWarn) {\n    colorSh = true;\n  }\n\n  console.log(companyDetails.co);\n\n  if (companyDetails.companyNumberOfEmployees !== companyDetails.numberOfEmployeesWarn) {\n    colorEmp = true;\n  }\n\n  if (companyDetails.companyCEO !== companyDetails.CEOWarn) {\n    colorC = true;\n  }\n\n  const args = {\n    companyName: companyDetails.name,\n    nameWarn: companyDetails.nameWarn,\n    companySegment: companyDetails.segment,\n    segmentWarn: companyDetails.segmentWarn,\n    companyShare: companyDetails.share,\n    shareWarn: companyDetails.shareWarn,\n    companyNumberOfEmployees: companyDetails.numberOfEmployees,\n    numberOfEmployeesWarn: companyDetails.numberOfEmployeesWarn,\n    companyCEO: companyDetails.ceo,\n    CEOWarn: companyDetails.ceoWarn,\n    countries,\n    companyCountryOfOperation: companyDetails.countryOfOperation,\n    color,\n    colorS,\n    colorSh,\n    colorEmp,\n    colorC,\n    cleanCountryName: () => {\n      console.log(\"Test\");\n\n      if (countries.findIndex(x => x.Name === companyDetails.countryOfOperation) === -1) {\n        setCompanyDetails([{\n          property: \"countryOfOperation\",\n          value: ''\n        }]);\n      }\n    },\n    setCompanyName: name => {\n      setCompanyDetails([{\n        property: \"name\",\n        value: name\n      }]);\n    },\n    setCompanySegment: segment => {\n      setCompanyDetails([{\n        property: 'segment',\n        value: segment\n      }]);\n    },\n    setCompanyShare: share => {\n      setCompanyDetails([{\n        property: 'share',\n        value: Number.parseInt(share)\n      }]);\n    },\n    setCompanyNumberOfEmployees: numberOfEmployees => {\n      setCompanyDetails([{\n        property: 'numberOfEmployees',\n        value: Number.parseInt(numberOfEmployees)\n      }]);\n    },\n    setCompanyCEO: ceo => {\n      setCompanyDetails([{\n        property: 'ceo',\n        value: ceo\n      }]);\n    },\n    setCountryOfOperation: countryOfOperation => {\n      setCompanyDetails([{\n        property: 'countryOfOperation',\n        value: countryOfOperation\n      }]);\n    },\n    reset: () => {\n      setInitialCompanyDetails();\n    },\n    onSubmitForm: () => {\n      initWorkflow();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(CompanyDetailsComponent, { ...args\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CompanyDetails, \"nfkdwGODdsyhoTtyS0i2rMKGspE=\", false, function () {\n  return [useStore];\n});\n\n_c = CompanyDetails;\nexport default CompanyDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"CompanyDetails\");","map":{"version":3,"sources":["/home/user/Downloads/socar_tree_view/src/feautures/companyDetails/views/CompanyDetails.js"],"names":["CompanyDetailsComponent","useStore","shallow","countries","useEffect","getState","state","companyDetails","setCompanyDetails","setInitialCompanyDetails","initWorkflow","getCompanyDetails","CompanyDetails","color","colorS","colorSh","colorEmp","colorC","companyName","nameWarn","console","log","companySegment","segmentWarn","companyShare","shareWarn","co","companyNumberOfEmployees","numberOfEmployeesWarn","companyCEO","CEOWarn","args","name","segment","share","numberOfEmployees","ceo","ceoWarn","companyCountryOfOperation","countryOfOperation","cleanCountryName","findIndex","x","Name","property","value","setCompanyName","setCompanySegment","setCompanyShare","Number","parseInt","setCompanyNumberOfEmployees","setCompanyCEO","setCountryOfOperation","reset","onSubmitForm"],"mappings":"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","sourcesContent":["import CompanyDetailsComponent from \"./CompanyDetailsComponent\";\r\nimport useStore from '../../../stores/useStore';\r\nimport shallow from 'zustand/shallow';\r\nimport countries from '../../../assets/countries.json';\r\nimport { useEffect } from \"react\";\r\n\r\nconst getState = state => [\r\n    state.companyDetails,\r\n    state.setCompanyDetails,\r\n    state.setInitialCompanyDetails,\r\n    state.initWorkflow,\r\n    state.getCompanyDetails\r\n];\r\n\r\nconst CompanyDetails = () => {\r\n    const [companyDetails, setCompanyDetails, setInitialCompanyDetails, initWorkflow, getCompanyDetails] = useStore(getState, shallow);\r\n    \r\n    useEffect(()=>{\r\n        getCompanyDetails();\r\n    }, []);\r\n\r\n    var color, colorS, colorSh, colorEmp, colorC = false;\r\n    if (companyDetails.companyName !== companyDetails.nameWarn){\r\n        color = true;\r\n    }\r\n    console.log(companyDetails.companyName, companyDetails.nameWarn);\r\n    if (companyDetails.companySegment !== companyDetails.segmentWarn){\r\n        colorS = true;\r\n    }\r\n    if (companyDetails.companyShare !== companyDetails.shareWarn){\r\n        colorSh = true;\r\n    }\r\n    console.log(companyDetails.co)\r\n    if (companyDetails.companyNumberOfEmployees !== companyDetails.numberOfEmployeesWarn){\r\n        colorEmp = true;\r\n    }\r\n    if (companyDetails.companyCEO !== companyDetails.CEOWarn){\r\n        colorC = true;\r\n    }\r\n\r\n    const args = {\r\n        companyName: companyDetails.name,\r\n        nameWarn: companyDetails.nameWarn,\r\n        companySegment: companyDetails.segment,\r\n        segmentWarn: companyDetails.segmentWarn,\r\n        companyShare: companyDetails.share,\r\n        shareWarn: companyDetails.shareWarn,\r\n        companyNumberOfEmployees: companyDetails.numberOfEmployees,\r\n        numberOfEmployeesWarn: companyDetails.numberOfEmployeesWarn,\r\n        companyCEO: companyDetails.ceo,\r\n        CEOWarn: companyDetails.ceoWarn,\r\n        countries,\r\n        companyCountryOfOperation: companyDetails.countryOfOperation,\r\n        color, colorS, colorSh, colorEmp, colorC,\r\n        cleanCountryName: () => {\r\n            console.log(\"Test\");\r\n            if(countries.findIndex(x=>x.Name === companyDetails.countryOfOperation) === -1){\r\n                setCompanyDetails([{property: \"countryOfOperation\", value: ''}]) \r\n            } \r\n        },\r\n        setCompanyName: name => {\r\n            setCompanyDetails([{property: \"name\", value: name}]) \r\n        },\r\n        setCompanySegment: segment => {\r\n            setCompanyDetails([{property: 'segment', value: segment}])\r\n        },\r\n        setCompanyShare: share => {\r\n            setCompanyDetails([{property: 'share', value: Number.parseInt(share)}])\r\n        },\r\n        setCompanyNumberOfEmployees: numberOfEmployees => {\r\n            setCompanyDetails([{property: 'numberOfEmployees', value: Number.parseInt(numberOfEmployees)}])\r\n        },\r\n        setCompanyCEO: ceo => {\r\n            setCompanyDetails([{property: 'ceo', value: ceo}])\r\n        },\r\n        setCountryOfOperation: countryOfOperation => {\r\n            setCompanyDetails([{property: 'countryOfOperation', value: countryOfOperation}])\r\n        },\r\n        reset: () => {\r\n            setInitialCompanyDetails();\r\n        }, \r\n        onSubmitForm: () => {\r\n            initWorkflow();\r\n        }\r\n    }\r\n\r\n    return <CompanyDetailsComponent {...args} />\r\n}\r\n\r\nexport default CompanyDetails;"]},"metadata":{},"sourceType":"module"}